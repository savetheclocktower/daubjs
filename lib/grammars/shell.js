import a from"../grammar.js";import{w as n}from"../utils-be932c53.js";import{VerboseRegExp as t}from"../utils/verbose-regexp.js";import"../template.js";import"../context.js";const e=new a({variable:{pattern:/(\$[\d\w_\-]+)\b|(\$\{[\d\w_\-]+\})/}}),s=new a({variable:{pattern:/(\$[\w_\-]+)\b/}}),p=new a("shell",{comment:{pattern:/#[^\n]*(?=\n|$)/},string:{pattern:/(?:'[^']*'|"[^"]*")/,before:(a,n)=>{a[0]=e.parse(a[0],n)}},function:{pattern:/(\w[\w\d_\-]+)(?=\()/},"meta: function definition":{pattern:t`
      \b(function)
      (\s+) # leading space
      ([a-zA-Z_$-]\w*) # function name
      (\s*) # trailing space
      (?={) # lookahead to open brace
    `,replacement:'<span class="keyword keyword-function">#{1}</span>#{2}<span class="entity">#{3}</span>#{4}'},"shell-command shell-command-backticks":{pattern:/(`)([^`]*)(`)/,replacement:'<span class="interpolation"><span class="punctuation">#{1}</span><span class="interpolation-contents">#{2}</span><span class="punctuation">#{3}</span></span>',before:(a,n)=>{a[2]=s.parse(a[2],n)}},"shell-command":{pattern:/(\$\()(.*?)(\))/,replacement:'<span class="interpolation"><span class="punctuation">#{1}</span><span class="interpolation-contents">#{2}</span><span class="punctuation">#{3}</span></span>',before:(a,n)=>{a[2]=s.parse(a[2],n)}},"support support-builtin":{pattern:/\b(?:sudo|chmod|cd|mkdir|ls|cat|echo|touch|mv|cp|rm|ln|sed|awk|tr|xargs|yes|pbcopy|pbpaste|trap)\b/},"support support-other":{pattern:/\b(?:ruby|gem|rake|python|pip|easy_install|node|npm|php|perl|bash|sh|zsh|gcc|go|mate|subl|atom|nano|pico)(?=\s)/},"meta: handle ip address":{pattern:/\b([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\b/,replacement:"#{1}.#{2}.#{3}.#{4}",before:(a,t)=>{for(let t=1;t<=4;t++)a[t]=n(a[t],"number")}},number:{pattern:/\b(?:[0-9]+(\.[0-9]+)?)\b/},constant:{pattern:/\b(?:false|true|SIGTERM|SIGINT|SIGKILL)\b/},"constant constant-home":{pattern:/(^|\s*|\n)~(?=\b|\/)/},keyword:{pattern:/\b(?:if|fi|case|esac|for|in|do|else|then|while|exit|done|shift)\b/},operator:{pattern:/>|&gt;|&amp;&amp;|&amp;|&&|&/},variable:{pattern:/(\$[\w_\-]+)\b/},"meta: subshell with $() notation":{pattern:t`
      \b
      (\$\() # opening
      (.*?)
      (\)) # closing
    `,replacement:'<span class="interpolation"><span class="punctuation">#{1}</span><span class="interpolation-contents">#{2}</span><span class="punctuation">#{3}</span></span>',before:(a,n)=>{a[2]=p.parse(a[2],n)}},"variable-assignment":{pattern:/([A-Za-z_][A-Za-z0-9_]*)(=)/,replacement:"<span class='variable'>#{1}</span><span class='operator'>#{2}</span>"},"variable variable-in-braces":{pattern:/\$\{.+?}(?=\n|\b)/}},{alias:["bash"]});export{p as default};
