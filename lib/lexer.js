import e from"./context.js";function t(e){return"function"==typeof e?e():e}function s(e,t){let s=e.final;if("boolean"==typeof s)return s;if("function"==typeof s)return s(t);if(s)throw new TypeError("Invalid value for rule.final!");return!1}class n extends Error{constructor(e){super(e),this.name="LexerError"}}class i{constructor(e,t,s,n,i={}){this.name=e,this.content=t,this.index=n+s,this.scopes=i.scopes}}class l{constructor(e,t="",s={}){this.rules=e,this.name=t,this.scopes=s.scopes,this.silent=!!s.silent,this.highlight=s.highlight}addRules(e){this.rules.push(...e)}[Symbol.iterator](){let e=[];for(let s of this.rules)if(s.include){let n=t(s.include);e.push([...n])}else e.push(s);return e.values()}run(r,h=null,{startIndex:o=0,highlight:a=!1}={}){let u=[];h||(h=new e);let f=null,c=o;for(;r;){let e,o,p;for(let t of this){if(p=t.pattern.exec(r),p&&t.test){t.test(p,r,h,t.pattern)||(p=null)}if(p){if(0===p.index){o=p,e=t;break}(!o||p.index<o.index)&&(o=p,e=t)}}if(!o)break;e.win&&e.win(o,r,h);let d=o.index,x=o.index+o[0].length;if(o.index>0){let e=r.slice(0,o.index);u.push(e),c+=e.length,d=0}r=r.slice(x);let g=s(e,h),m=g&&e.skipSubRulesIfFinal;if(e.trim){if(e.raw)throw new n('Options "trim" and "raw" cannot coexist on a rule!');let t=o[0],s=/^[\n\s\t]+/.exec(t);s&&(u.push(s[0]),o[0]=o[0].slice(s[0].length),c+=s[0].length)}if(e.raw)u.push(o[0]),c+=o[0].length;else if(!e.inside&&!e.after||m){let t=new i(e.name,o[0],d,c,{scopes:e.scopes||e.name});u.push(t),c+=o[0].length}else{let s,f,p;if(e.inside?(p="inside",s=e.inside.name,f=t(e.inside.lexer)):(p="after",s=e.after.name,f=t(e.after.lexer)),!(f&&f instanceof l))throw new n("Invalid lexer!");let x=new i(e.name,o[0],d,c,{scopes:e.scopes||e.name}),g=c+o[0].length-d,m=[];"inside"===p?m.push(x):u.push(x);let w=f.run(r,h,{startIndex:g,highlight:a});m.push(...w.tokens);let b=new i(s,m,d,c,{scopes:w.scopes});u.push(b),c=w.lengthConsumed,r=w.text}if(g)break;if(r===f)break;f=r}return a&&this.highlight&&(u=this.highlight(u,h)),{name:this.name,scopes:this.scopes,content:u,tokens:u,text:r,lengthConsumed:c}}}export{i as Token,l as default};
